// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id          Int          @id @default(autoincrement())
  email       String       @unique
  name        String?
  courses     Course[]     @relation("UserCourses")
  enrollments Enrollment[]
  submissions Submission[]
  reviews     Review[]

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

}

model Course {
  id          Int          @id @default(autoincrement())
  title       String
  description String?
  users       User[]       @relation("UserCourses")
  enrollments Enrollment[]
  lessons     Lesson[]
  assignments Assignment[]
  reviews     Review[]     
  categoryId  Int
  category    Category   @relation(fields: [categoryId], references: [id])

  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Enrollment {
  id        Int      @id @default(autoincrement())
  userId    Int
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

  createdAt   DateTime @default(now())

}

model Lesson {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])

   createdAt   DateTime @default(now())

}

model Assignment {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  courseId  Int
  course    Course   @relation(fields: [courseId], references: [id])
  submission Submission[]
  createdAt   DateTime @default(now())
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String
  courses   Course[]
 
}

model Review {
  id        Int      @id @default(autoincrement())
  content   String
  rating    Int
  userId    Int
  courseId  Int
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])

}

model Submission {
  id            Int        @id @default(autoincrement())
  content       String
  assignmentId  Int
  userId        Int
  assignment    Assignment @relation(fields: [assignmentId], references: [id])
  user          User       @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
}